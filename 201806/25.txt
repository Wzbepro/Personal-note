1-
	Java中实现方法重载的条件：
		1-在同一类中
		2-方法名称相同，参数不同（参数类型、个数、排序）
		3-与访问修饰符和返回值类型无关
2-
	成员变量和局部变量的区分：
		1-位置不同：
			|-成员变量在类中，但不在具体方法和代码块中。
			|-局部变量在方法中以及在代码语句中。
		2-初始值不同：
			|-成员变量声明就可以使用，系统自动为变量进行赋初值操作
			|-局部变量必须先声明后赋值之后才能使用（不存在默认值）
		3-在内存中存储位置不同
			|-成员变量分配到堆内存中
			|-局部变量分配到栈内存中
		4-生命周期不同
			|-成员变量随着对象的存在而存在，随着对象的销毁而销毁。
			|-局部变量随着方法调用而存在，随着方法的销毁而销毁。
3-
	构造方法的特征：
		|-方法名称与类名形同
		|-可以对类的成员进行初始化
	构造方法的作用：
		|*在创建类对象的时候显示调用构造方法
		|*对类的成员进行初始化
4-
	面向对象的封装：
		|-属性私有化
		|-提供对应的setter和getter的操作
5-
	静态变量和非静态变量的区别：
		|-非静态变量单独属于某个对象；
		|-静态变量存储在静态方法中，为多个对象所共享；
		|-静态变量存储在静态方法中，而非静态变量则是存储在堆上（成员变量）
6-
	static修饰的成员
	|-修饰成员变量
	|-修饰成员方法
	|-修饰代码块
7-
	this关键字
	|-this表示当前对象
	|-在本类中this调用本类中成员属性和成员方法
	|-this可以在构造方法中使用（必须作为第一条执行语句）
	|-this不能在多个构造方法之间相互调用
	|-this可以用来区别成员变量与局部变量同名
8-
	子类继承父类：
	·父类private成员不能继承
	·父类构造方法不能继承
	·如默认的修饰符不同包的子类不能继承
9------
	继承的好处：
	1-模拟实现世界中对象与对象之间的关系
	2-提高代码的重用性

10- 抽象类的特点：
	A：抽象类和抽象方法必须使用abstract修饰
	B：抽象类中不一定有抽象方法，但是有抽象方法必须有抽象类。
	C：抽象类不能实例化。
	D：抽象的子类：
		|-是一个抽象类；
		|-是一个具体类：这个类必须重写抽象类中所有抽象方法；
	---------------------------------------------
	*抽象类有构造方法但不能实例化有何作用?
		|-用于子类访问父类数据的初始化
	*一个类如果没有抽象方法，却定义为了抽象类，有什么用？
		|-为了不让创建对象
	*abstract不能和那些关键字共存？
	1-final冲突
	2-private冲突
	3-static无意义
11-
	java多态的构成条件：
		|-继承
		|-重写
		|-父类的引用指向子类的对象

	java多态的好处：
		|-模拟现实世界中对象与对象之间的关系
		|-提高程序可扩展性（灵活性）
			*提高代码的维护性）——继承
			*提高代码的扩展性）——多态
12-
	抽象类与接口的区别：
		A成员区别：
			1、抽象类：	
				a）成员变量：变量 |常量
				b）构造方法：有
				c）成员方法：抽象|非抽象
			2、接口：
				a）成员变量：只可以为常量
				b）成员方法：只可以为抽象
		B关系区别：
			3、类与类区别：继承、单继承
			4、类与接口区别：实现、单实现、多实现
			5、接口与接口：继承、单继承、多继承
		C设计理念区别：
			6-抽象类：被继承体现的是is-a的关系，抽象类中定义的是该继承体系的共性功能。
			7-接口：被实现提箱的是like-a的关系，接口中定义的是该继承体现的扩展功能。（面向接口编程的思想）
			
