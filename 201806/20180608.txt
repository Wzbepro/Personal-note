1-----------------------------------------------------
package day8;
/**Java 多态
 * 多态是同一个行为具有不同形式或形态的能力或者说不同类型对象对同一消息所产生不同的反映
 * 多态就是同一个接口，使用不同的实例而执行不同操作
 * 多态的优点：
 * |-消除类型之间的耦合关系
 * |-可替换行
 * |-可扩充性
 * |-灵活性
 * |-简化性
 * 多态存在的三个必要条件：
 * |--继承（extends）--重写(Overide)
 * |--重载（Overload）
 * |--父类引用执行子类对象（接口interface）*/

/**Parent p = new Child();
 * 使用多态方式调用方法时，首先检查父类是否有该方法，如果没有，则compiler error
 * 如果有，则去调用子类的同名方法*/
2-------------------------------------------------------
package day8;

/**重写（Override）：子类对父类的允许访问的方法的实现过程进行重新编写，【返回值】和【形参】都不能变
 * 即外壳不变，核心变
 * 重写的好处：
 * 	|-子类可以根据需要，定义特定于自己的行为，也就是说子类能够根据需要实现父类的方法。
 * |-重写方法不能抛出新的检查异常或者比被重写方法申明更为宽泛的异常
 * eg： 若父类中申明IOException则子类就不能再申明为Exception类的异常，IOException为Exception的子类*/
class TestPholymorphism{
	public void move() 
	{
		System.out.println("The animal can move");
	}
}

class Dog extends TestPholymorphism{
	public void move() {
		System.out.println("The dog can running and swimming !");
	}
}
/**---------------------------------------------------------------------*/
package day8;
public class TestDog {
	public static void main(String[] args) {
		TestPholymorphism animal = new TestPholymorphism();
		animal.move();
		Dog dog = new Dog();
		dog.move();
	}
}

/**Output
 * 
 >>>The animal can move
>>>The dog can running and swimming !*/
/**重写的规则：
 * |-参数列表必须与被重写方法的项同；
 * |-返回类型必须完全与被重写方法的返回类型相同；
 * |-访问权限不比父类中被重写的方法的访问权限更低。这个可以比喻成子类为一个盒子只有比父类
 * 更大的盒子参能转下父类的属性和行为。
 * |-子类和父类在同一包中，则子类重写父类的所有方法。
 *	|-声明为final的不能被继承，因为final修饰的是太监类，太监方法，还有最终属性
 *|-子类和父类不在同一个包中，则子类只能重写父类的声明为【public】 和 【protected】方法
 *|-构造方法不能被重写
 *|-如果不能继承一个方法，则不能重写这个方法*/
