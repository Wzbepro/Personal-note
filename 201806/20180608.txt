1-----------------------------------------------------
package day8;
/**Java 多态
 * 多态是同一个行为具有不同形式或形态的能力或者说不同类型对象对同一消息所产生不同的反映
 * 多态就是同一个接口，使用不同的实例而执行不同操作
 * 多态的优点：
 * |-消除类型之间的耦合关系
 * |-可替换行
 * |-可扩充性
 * |-灵活性
 * |-简化性
 * 多态存在的三个必要条件：
 * |--继承（extends）--重写(Overide)
 * |--重载（Overload）
 * |--父类引用执行子类对象（接口interface）*/

/**Parent p = new Child();
 * 使用多态方式调用方法时，首先检查父类是否有该方法，如果没有，则compiler error
 * 如果有，则去调用子类的同名方法*/
2-------------------------------------------------------
package day8;

/**重写（Override）：子类对父类的允许访问的方法的实现过程进行重新编写，【返回值】和【形参】都不能变
 * 即外壳不变，核心变
 * 重写的好处：
 * 	|-子类可以根据需要，定义特定于自己的行为，也就是说子类能够根据需要实现父类的方法。
 * |-重写方法不能抛出新的检查异常或者比被重写方法申明更为宽泛的异常
 * eg： 若父类中申明IOException则子类就不能再申明为Exception类的异常，IOException为Exception的子类*/
class TestPholymorphism{
	public void move() 
	{
		System.out.println("The animal can move");
	}
}

class Dog extends TestPholymorphism{
	public void move() {
		System.out.println("The dog can running and swimming !");
	}
}
/**---------------------------------------------------------------------*/
package day8;
public class TestDog {
	public static void main(String[] args) {
		TestPholymorphism animal = new TestPholymorphism();
		animal.move();
		Dog dog = new Dog();
		dog.move();
	}
}

/**Output
 * 
 >>>The animal can move
>>>The dog can running and swimming !*/
/**重写的规则：
 * |-参数列表必须与被重写方法的项同；
 * |-返回类型必须完全与被重写方法的返回类型相同；
 * |-访问权限不比父类中被重写的方法的访问权限更低。这个可以比喻成子类为一个盒子只有比父类
 * 更大的盒子参能转下父类的属性和行为。
 * |-子类和父类在同一包中，则子类重写父类的所有方法。
 *	|-声明为final的不能被继承，因为final修饰的是太监类，太监方法，还有最终属性
 *|-子类和父类不在同一个包中，则子类只能重写父类的声明为【public】 和 【protected】方法
 *|-构造方法不能被重写
 *|-如果不能继承一个方法，则不能重写这个方法*/

 /**--------------------------------------------------------------------------*package day8;

/**重载（Overload）
 * 重载（overloading）
 * 是在一个【类】里面，
 * 【方法名字相同】，【而参数不同】，【返回类型】【可以相同也可以不相同】
 * 每个重载的方法（或者构造函数）都必须有一个独一无二的参数类型列表
 * 最常用的重载的是构造器的重载。
 * 
 * 重载规则：
 * |-被重载的方法必须改变参数列表（参数个数或类型不一样）
 * |-被重载的方法可以改变返回类型
 * |-被重载的方法可以改变访问修饰符
 * |-被重载的方法有更为自由的检查异常
 * |-方法能够在同一类中或者在一个子类中被重载
 * |-无法以返回值类型作为重载函数的区分标准*/

public class Overloading {
	public int test()
	{
		System.out.println("test1-------");
		return 1;
	}
	
	public void test(int a)
	{
		System.out.println("test2--------");
	}
	
	public String test(String s, int a)
	{
		System.out.println("The string:" +  s);
		return s;
	}
	
	public static void main(String[] args) {
		Overloading o = new Overloading();
		System.out.println(o.test());
		System.out.println("---------------------------");
		o.test();
		System.out.println("-------第二种重载方法--------");
		o.test(100);
		System.out.println("-------第三种重载方法");
		o.test("第三种构造方法", 300);
	}
}
3-----------------------------------------------
package day8;
/**Java Demo 接口
 * 在Java编程语言是一个抽象类型，是抽象方法的集合，接口通常以interface的方式声明
 * 一个类通过继承接口的方式，从而继承接口的抽象方法
 * 
 * 接口并不是类，编写接口的方式和类相似，但他们属于不同的概念
 * 类--------描述对象的属性和方法
 * 接口------包含类要实现的方法
 * 
 * 除非实现接口的是抽象类，否则该类要定义接口中的所有方法
 * 
 * 接口无法被实例化，但可以被实现，一个实现接口的类，必须实现接口中所描述的【所有】方法
 * 在Java中，接口类型可以用来声明一个变量。
 * 
 * 接口和类的相似点：
 * 		一个接口可以有多个方法
 * 		接口文件保存在.java结尾的方法中文件名使用接口名
 * 		接口的字节码文件保存在.class结尾的文件中
 * 		接口的相应字节码文件必须在包名称相匹配的目录结构中*/

/**接口与类的区别：
 * 		接口不能用于实例化对象
 * 		接口没有构造方法
 * 		接口中所有方法必须是抽象方法
 * 		接口不能包含成员变量，除了static和final变量
 * 		接口支持多继承*/

/**接口与抽象类的区别
 * 	1、抽象类中的方法可以有方法实体，就是能实现方法的具体功能，但是接口中的方法不行
 * 2、-抽象类中的成员变量可以是各种类型的，而接口中的成员变量只能是public static final类型
 * 3、接口中不能含有静态代码块以及静态方法（用static修饰的方法），而抽象类可以有静态代码块和静态方法
 * 4、一个类只能继承一个抽象类，而一个类却可以实现多个接口*/

/**接口的特性：
 * 接口是隐士抽象的，当声明一个接口的时候，不必使用abstract关键字
 * 接口中每一个方法也是隐士抽象的，声明时同样不需要abstract关键字
 * 接口中方法都是公用的。*/


